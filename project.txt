110
===

Objectives
==========
1. Develop playable application for card games. 110 to start with.
2. Learn to use Python3.
3. Don't get involved in fixing other people's code (too much).


PLAN
====
1. Develop the game from the command line.
2. Create minimal client command line app to send JSON commands 
   to the server and receive and display the replies. 
3. Choose a GUI to use. 
   Pyjs was looking promising until I tried to use it.  Only supports Python2 so no use.
   Going for PySide instead as it is a Qt wrapper, supports Python3 and is easy to install.   
4. Create a GUI using the new framework.  


IPC
===
Use twisted framework to create server.
	Four telnet clients to start with.
	When GUI starts working, change to JSON.
Twisted was no good as the Python3 version was rubbish.  Looks like Twisted is dead.

Found Tornado.  This works for Python3 but takes a lot of getting my head round it and it 
looks like I'm going to end up with a nice web front end. Not quite what I was looking for. 

Trying again.

Finally found a very basic server for telnet clients. See src/test_apps/async_test for code.
Carried on looking.  Found and modified some example code to create a nice TCP example.
Now to make it multi-client. 

GUI
===
Implement basic menus.
>> Done.
Set up communication with the server using temporary menu commands for input.
Basic drag and drop of pixmaps.
Find some nice pixmaps for the deck.
Work out how to do the layout in the GUI.  The piles on the server 
don't know where they are but the piles in the GUI need to know.  Need some 
sort of layout file?


TODO
====
Add more rules about bidding.

If a player leads with the Joker, there is no suit set so any card can be laid.
This works already as no one else will be able to follow suit. 

Add "The suit to follow is" message to each player.

The winner of the round should lead the next round. 
Next round does not start properly.
Exchange cards
Player Colin Trump suit Diamonds
Index  Discard  Card
Enter card to discard, 1-5. Enter 0 when done.